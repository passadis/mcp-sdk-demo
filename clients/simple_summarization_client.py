"""
Simple Summarization Client - Direct implementation without MCP SDK overhead.
"""

import asyncio
import json
import os
import sys
from typing import Any, Dict, Optional

# Add parent directory to path for imports
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from shared.crypto_utils import KeyManager
from shared.config import Config, LogConfig

# Setup logging
logger = LogConfig.setup_logging("simple_summarization_client")

# Initialize key manager for client
client_key_manager = KeyManager(
    key_dir=os.path.join(Config.KEYS_BASE_DIR, "summarization_client_simple"),
    entity_name="summarization_client_simple"
)


class SimpleSummarizationClient:
    """Simplified client for text summarization without MCP SDK dependencies."""
    
    def __init__(self):
        self.service_available = self._check_azure_config()
        
    def _check_azure_config(self) -> bool:
        """Check if Azure OpenAI is configured."""
        config_valid, missing = Config.validate_azure_openai_config()
        if not config_valid:
            logger.warning(f"Azure OpenAI not configured. Missing: {missing}")
        return config_valid
    
    async def check_service_status(self) -> Dict[str, Any]:
        """Check the status of the summarization service."""
        config_valid, missing = Config.validate_azure_openai_config()
        
        return {
            "service_status": "operational" if config_valid else "configuration_error",
            "azure_openai_configured": config_valid,
            "missing_configurations": missing if not config_valid else [],
            "available_access_keys_count": len(Config.VALID_ACCESS_KEYS)
        }
    
    async def summarize_text(self, text: str, access_key: str, encrypted: bool = False) -> Dict[str, Any]:
        """Summarize text using Azure OpenAI."""
        try:
            logger.info(f"Summarization request with access key: {access_key}")
            
            # Validate access key
            if access_key not in Config.VALID_ACCESS_KEYS:
                logger.warning(f"Invalid access key: {access_key}")
                return {
                    "error": "Invalid or unauthorized access key",
                    "status": "forbidden",
                    "access_granted": False
                }
            
            logger.info(f"Access key validated: {access_key}")
            
            # Check if Azure OpenAI is configured
            if not self.service_available:
                return {
                    "error": "Azure OpenAI service not configured",
                    "status": "service_error",
                    "access_granted": True
                }
            
            # Perform summarization
            summary = await self._perform_summarization(text)
            
            if summary.startswith("Error:"):
                return {
                    "error": summary,
                    "status": "service_error", 
                    "access_granted": True
                }
            else:
                return {
                    "summary": summary,
                    "status": "success",
                    "access_granted": True,
                    "text_length": len(text),
                    "summary_length": len(summary)
                }
                
        except Exception as e:
            logger.error(f"Error summarizing text: {e}")
            return {"error": str(e), "status": "internal_error"}
    
    async def _perform_summarization(self, text: str) -> str:
        """Perform the actual summarization using Azure OpenAI."""
        if not self.service_available:
            return "Error: Azure OpenAI service not configured"
        
        try:
            from openai import AzureOpenAI
            
            client = AzureOpenAI(
                api_key=Config.AZURE_OPENAI_API_KEY,
                api_version=Config.AZURE_OPENAI_API_VERSION,
                azure_endpoint=Config.AZURE_OPENAI_ENDPOINT
            )
            
            response = client.chat.completions.create(
                model=Config.AZURE_OPENAI_DEPLOYMENT_NAME,
                messages=[
                    {
                        "role": "system",
                        "content": "You are an AI assistant that expertly summarizes provided text into a few key sentences."
                    },
                    {
                        "role": "user",
                        "content": f"Please provide a concise summary of the following text:\n\n{text}"
                    }
                ],
                max_tokens=200,
                temperature=0.5
            )
            
            summary = response.choices[0].message.content
            logger.info("Summary successfully generated by Azure OpenAI")
            return summary
            
        except ImportError:
            return "Error: OpenAI package not installed. Run: pip install openai"
        except Exception as e:
            error_msg = f"Error during summarization: {str(e)[:100]}"
            logger.error(error_msg)
            return f"Error: {error_msg}"


async def demo_simple_summarization():
    """Demonstrate simple summarization functionality."""
    logger.info("Starting simple summarization demo")
    
    client = SimpleSummarizationClient()
    
    try:
        print("\n=== Simple Summarization Demo ===\n")
        
        # Test 1: Check service status
        print("1. Checking service status:")
        status = await client.check_service_status()
        print(json.dumps(status, indent=2))
        
        print("\n" + "="*50 + "\n")
        
        # Test 2: Summarize sample text
        sample_text = """
        Artificial Intelligence has revolutionized many industries over the past decade.
        Machine learning algorithms can now process vast amounts of data to identify
        patterns and make predictions with remarkable accuracy. Natural language processing
        enables computers to understand and generate human language, while computer vision
        allows machines to interpret visual information. These advances have led to
        breakthroughs in autonomous vehicles, medical diagnosis, financial analysis,
        and customer service automation. However, the rapid development of AI also
        raises important questions about privacy, job displacement, and ethical use
        of these powerful technologies.
        """
        
        # Test with valid access keys
        for access_key in ["SECRETKEY123", "SUMMARY_ACCESS_777", "INVALID_KEY"]:
            print(f"2. Testing with access key: {access_key}")
            result = await client.summarize_text(sample_text, access_key, encrypted=False)
            
            if result.get("status") == "success":
                print("✅ Summarization successful!")
                print(f"Summary: {result['summary']}")
            elif result.get("status") == "forbidden":
                print("❌ Access denied")
            else:
                print(f"❌ Error: {result.get('error')}")
            
            print("\n" + "-"*30 + "\n")
        
    except Exception as e:
        logger.error(f"Demo failed: {e}")
        print(f"Error running demo: {e}")
        import traceback
        traceback.print_exc()
    
    print("=== Simple Summarization Demo Complete ===")


if __name__ == "__main__":
    asyncio.run(demo_simple_summarization())
