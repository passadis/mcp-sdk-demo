# MCP Document Exchange System - Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# AZURE OPENAI CONFIGURATION (Required for Summarization)
# =============================================================================

# Your Azure OpenAI API Key
AZURE_OPENAI_KEY=your-azure-openai-api-key-here

# Your Azure OpenAI Endpoint URL
AZURE_OPENAI_ENDPOINT=https://your-resource-name.openai.azure.com/

# Your Azure OpenAI Deployment Name (the model deployment you created)
AZURE_OPENAI_DEPLOYMENT_NAME=gpt-35-turbo

# Azure OpenAI API Version
AZURE_OPENAI_API_VERSION=2024-02-15-preview

# =============================================================================
# MCP SERVER CONFIGURATION
# =============================================================================

# Document Verification Server
DOCUMENT_SERVER_HOST=localhost
DOCUMENT_SERVER_PORT=8001

# Summarization Server  
SUMMARIZATION_SERVER_HOST=localhost
SUMMARIZATION_SERVER_PORT=8002

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Directory for storing encryption keys
KEYS_BASE_DIR=keys

# Valid access codes for document processing (comma-separated)
VALID_ACCESS_KEYS=DOC001,VERIFY123,SUMMARY456,SECRETKEY123,SUMMARY_ACCESS_777

# =============================================================================
# WEB UI CONFIGURATION
# =============================================================================

# Flask secret key (change this for production!)
FLASK_SECRET_KEY=mcp-ui-secret-key-change-in-production

# Flask environment
FLASK_ENV=development

# Flask debug mode
FLASK_DEBUG=1

# Web UI port
WEB_UI_PORT=5000

# =============================================================================
# INSTRUCTIONS FOR SETUP
# =============================================================================

# 1. Create an Azure OpenAI resource in Azure Portal
# 2. Deploy a GPT model (e.g., gpt-35-turbo or gpt-4)
# 3. Get your API key and endpoint from Azure Portal
# 4. Update the AZURE_OPENAI_* variables above
# 5. Save this file as .env in the web_ui directory
# 6. Run: python app.py

# =============================================================================
# SAMPLE VALUES (for testing without Azure OpenAI)
# =============================================================================

# If you don't have Azure OpenAI, you can test with mock responses
# Set this to 'true' to enable mock mode
USE_MOCK_RESPONSES=false

# =============================================================================
# ALTERNATIVE: OPENAI API (instead of Azure OpenAI)
# =============================================================================

# If you prefer to use OpenAI API directly instead of Azure
# OPENAI_API_KEY=your-openai-api-key-here
# OPENAI_MODEL=gpt-3.5-turbo
